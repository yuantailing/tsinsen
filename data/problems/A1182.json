{"code":"","content":"<h2 id=\"aeaoofnhgocdbnbeljkmbjdmhbcokfdb-mousedown\" style=\"color: blue; font-family: 'Times New Roman'; \">&nbsp;</h2>\n<p>【问题描述】</p>\n<p>　　小晨的电脑上安装了一个机器翻译软件，他经常用这个软件来翻译英语文章。 　　这个翻译软件的原理很简单，它只是从头到尾，依次将每个英文单词用对应的中文含义来替换。对于每个英文单词，软件会先在内存中查找这个单词的中文含义，如果内存中有，软件就会用它进行翻译；如果内存中没有，软件就会在外存中的词典内查找，查出单词的中文含义然后翻译，并将这个单词和译义放入内存，以备后续的查找和翻译。 　　假设内存中有M 个单元，每单元能存放一个单词和译义。每当软件将一个新单词存入内存前，如果当前内存中已存入的单词数不超过M&minus;1，软件会将新单词存入一个未使用的内存单元；若内存中已存入M 个单词，软件会清空最早进入内存的那个单词，腾出单元来， 存放新单词。 　　假设一篇英语文章的长度为N 个单词。给定这篇待译文章，翻译软件需要去外存查找多少次词典？假设在翻译开始前，内存中没有任何单词。<br />\n【输入格式】</p>\n<p>　　输入共2 行。每行中两个数之间用一个空格隔开。</p>\n<p>第一行为两个正整数M 和N，代表内存容量和文章的长度。</p>\n<p>&nbsp;第二行为N 个非负整数，按照文章的顺序，每个数（大小不超过1000）代表一个英文单词。文章中两个单词是同一个单词，当且仅当它们对应的非负整数相同。<br />\n【输出格式】</p>\n<p>　　输出共1 行，包含一个整数，为软件需要查词典的次数。<br />\n【输入样例】</p>\n<p>Sample Input 1:</p>\n<p>3 7<br />\n1 2 1 5 4 4 1</p>\n<p>Sample Input 2:<br />\n2 10<br />\n8 824 11 78 11 78 11 78 8 264<br />\n<br />\n【输出样例】</p>\n<p>Sample Output 1:</p>\n<p>5</p>\n<p>Sample Output 2:</p>\n<p>6</p>\n<p><br />\n【输入输出样例 1 说明】<br />\n整个查字典过程如下：每行表示一个单词的翻译，冒号前为本次翻译后的内存状况：<br />\n空：内存初始状态为空。<br />\n1． 1：查找单词1 并调入内存。<br />\n2． 1 2：查找单词2 并调入内存。<br />\n3． 1 2：在内存中找到单词1。<br />\n4． 1 2 5：查找单词5 并调入内存。<br />\n5． 2 5 4：查找单词4 并调入内存替代单词1。<br />\n6． 2 5 4：在内存中找到单词4。<br />\n7． 5 4 1：查找单词1 并调入内存替代单词2。<br />\n共计查了5 次词典。 <!--EndFragment--></p>\n<p>【数据范围】<br />\n对于10%的数据有M=1，N&le; 5。<br />\n对于100%的数据有0</p>\n<div class=\"content\" style=\"height: auto; background-image: initial; background-attachment: initial; background-origin: initial; background-clip: initial; margin-top: 0px; margin-right: 0px; margin-bottom: 0px; margin-left: 0px; padding-top: 0px; padding-right: 20px; padding-bottom: 0px; padding-left: 20px; font-size: 14px; font-family: 'Times New Roman'; text-align: left; \">\n<p>&nbsp;</p>\n</div>\n<!--EndFragment-->","fcontent":"<div class='pdsec'>问题描述</div><div class='pdcont'>　　小晨的电脑上安装了一个机器翻译软件，他经常用这个软件来翻译英语文章。   这个翻译软件的原理很简单，它只是从头到尾，依次将每个英文单词用对应的中文含义来替换。对于每个英文单词，软件会先在内存中查找这个单词的中文含义，如果内存中有，软件就会用它进行翻译；如果内存中没有，软件就会在外存中的词典内查找，查出单词的中文含义然后翻译，并将这个单词和译义放入内存，以备后续的查找和翻译。   假设内存中有M 个单元，每单元能存放一个单词和译义。每当软件将一个新单词存入内存前，如果当前内存中已存入的单词数不超过M&minus;1，软件会将新单词存入一个未使用的内存单元；若内存中已存入M 个单词，软件会清空最早进入内存的那个单词，腾出单元来， 存放新单词。   假设一篇英语文章的长度为N 个单词。给定这篇待译文章，翻译软件需要去外存查找多少次词典？假设在翻译开始前，内存中没有任何单词。</div><div class='pdsec'>输入格式</div><div class='pdcont'>　　输入共2 行。每行中两个数之间用一个空格隔开。<br />\n　　第一行为两个正整数M 和N，代表内存容量和文章的长度。<br />\n　　第二行为N 个非负整数，按照文章的顺序，每个数（大小不超过1000）代表一个英文单词。文章中两个单词是同一个单词，当且仅当它们对应的非负整数相同。</div><div class='pdsec'>输出格式</div><div class='pdcont'>　　输出共1 行，包含一个整数，为软件需要查词典的次数。</div><div class='pdsec'>样例输入</div><div class='pddata'>Sample Input 1:<br />\n3 7<br />\n1 2 1 5 4 4 1<br />\nSample Input 2:<br />\n2 10<br />\n8 824 11 78 11 78 11 78 8 264</div><div class='pdsec'>样例输出</div><div class='pddata'>Sample Output 1:<br />\n5<br />\nSample Output 2:<br />\n6</div><div class='pdsec'>输入输出样例 1 说明</div><div class='pdcont'>　　整个查字典过程如下：每行表示一个单词的翻译，冒号前为本次翻译后的内存状况：<br />\n　　空：内存初始状态为空。<br />\n　　1． 1：查找单词1 并调入内存。<br />\n　　2． 1 2：查找单词2 并调入内存。<br />\n　　3． 1 2：在内存中找到单词1。<br />\n　　4． 1 2 5：查找单词5 并调入内存。<br />\n　　5． 2 5 4：查找单词4 并调入内存替代单词1。<br />\n　　6． 2 5 4：在内存中找到单词4。<br />\n　　7． 5 4 1：查找单词1 并调入内存替代单词2。<br />\n　　共计查了5 次词典。</div><div class='pdsec'>数据规模和约定</div><div class='pdcont'>　　对于10%的数据有M=1，N≤ 5。<br />\n　　对于100%的数据有0</div>\n","files":"","gpid":"A1182","indatacount":0,"inputfile":"","langs":"CPP,C0X,VC9,C,JAVA,PAS,PYTHON","memorylimit":"128.0MB","opid":0,"outputfile":"","remain":0,"ret":1,"specialjudge":"","src":"NOIP2010 提高组","subinter":0,"timelimit":"1.0s","title":"机器翻译","type":"DEFAULT"}