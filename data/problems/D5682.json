{"code":"","content":"<p style=\"text-align: left; margin: 0cm 0cm 0pt; background: white; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-para-margin-left: 0gd; mso-pagination: widow-orphan\" class=\"MsoNormal\" align=\"left\">【问题描述】</p>\n<p style=\"text-align: left; margin: 0cm 0cm 0pt; background: white; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-para-margin-left: 0gd; mso-pagination: widow-orphan\" class=\"MsoNormal\" align=\"left\"><span style=\"font-family: 宋体; font-size: 9pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-font-kerning: 0pt\">编程体会包含内嵌对象多继承派生类的带参构造函数和析构函数调用顺序。声明三个基类</span><span style=\"font-family: &quot;Times New Roman&quot;,&quot;serif&quot;; font-size: 9pt; mso-font-kerning: 0pt\" lang=\"EN-US\">Base1</span><span style=\"font-family: 宋体; font-size: 9pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-font-kerning: 0pt\">、</span><span style=\"font-family: &quot;Times New Roman&quot;,&quot;serif&quot;; font-size: 9pt; mso-font-kerning: 0pt\" lang=\"EN-US\">Base2</span><span style=\"font-family: 宋体; font-size: 9pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-font-kerning: 0pt\">和</span><span style=\"font-family: &quot;Times New Roman&quot;,&quot;serif&quot;; font-size: 9pt; mso-font-kerning: 0pt\" lang=\"EN-US\">Base3</span><span style=\"font-family: 宋体; font-size: 9pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-font-kerning: 0pt\">，然后从这三个基类按照公有方式派生出类</span><span style=\"font-family: &quot;Times New Roman&quot;,&quot;serif&quot;; font-size: 9pt; mso-font-kerning: 0pt\" lang=\"EN-US\">Derived</span><span style=\"font-family: 宋体; font-size: 9pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-font-kerning: 0pt\">。在三个基类中分别定义带一个整型参数的构造函数和析构函数输出提示信息，提示信息中需要包含整型参数的数值。在派生类</span><span style=\"font-family: &quot;Times New Roman&quot;,&quot;serif&quot;; font-size: 9pt; mso-font-kerning: 0pt\" lang=\"EN-US\">Derived</span><span style=\"font-family: 宋体; font-size: 9pt; mso-ascii-font-family: 'Times New Roman'; mso-hansi-font-family: 'Times New Roman'; mso-font-kerning: 0pt\">中需要包含三个基类的内嵌对象，和相应的构造函数和析构函数用于输出提示信息，在构造函数中包含七个整型参量，其中六个用于初始化派生类和内嵌对象。</span><span style=\"font-family: &quot;Times New Roman&quot;,&quot;serif&quot;; font-size: 9pt; mso-font-kerning: 0pt\" lang=\"EN-US\"><o:p></o:p></span></p>\n<p style=\"text-align: left; margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd; mso-layout-grid-align: none\" class=\"MsoNormal\" align=\"left\">&nbsp;</p>\n<p style=\"margin: auto 0cm; background: white\" class=\"a\"><font face=\"宋体\">【输出样例】</font></p>\n<p style=\"margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd\" class=\"MsoNormal\"><span lang=\"EN-US\"><font size=\"3\" face=\"Calibri\">Base2 constructor called 3</font></span></p>\n<p style=\"margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd\" class=\"MsoNormal\"><span lang=\"EN-US\"><font size=\"3\" face=\"Calibri\">Base1 constructor called 2</font></span></p>\n<p style=\"margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd\" class=\"MsoNormal\"><span lang=\"EN-US\"><font size=\"3\" face=\"Calibri\">Base3 constructor called 4</font></span></p>\n<p style=\"margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd\" class=\"MsoNormal\"><span lang=\"EN-US\"><font size=\"3\" face=\"Calibri\">Base3 constructor called 7</font></span></p>\n<p style=\"margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd\" class=\"MsoNormal\"><span lang=\"EN-US\"><font size=\"3\" face=\"Calibri\">Base1 constructor called 5</font></span></p>\n<p style=\"margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd\" class=\"MsoNormal\"><span lang=\"EN-US\"><font size=\"3\" face=\"Calibri\">Base2 constructor called 6</font></span></p>\n<p style=\"margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd\" class=\"MsoNormal\"><span lang=\"EN-US\"><font size=\"3\" face=\"Calibri\">Derived constructor called 1</font></span></p>\n<p style=\"margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd\" class=\"MsoNormal\"><span lang=\"EN-US\"><font size=\"3\" face=\"Calibri\">Derived destructor called</font></span></p>\n<p style=\"margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd\" class=\"MsoNormal\"><span lang=\"EN-US\"><font size=\"3\" face=\"Calibri\">Base2 destructor called</font></span></p>\n<p style=\"margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd\" class=\"MsoNormal\"><span lang=\"EN-US\"><font size=\"3\" face=\"Calibri\">Base1 destructor called</font></span></p>\n<p style=\"margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd\" class=\"MsoNormal\"><span lang=\"EN-US\"><font size=\"3\" face=\"Calibri\">Base3 destructor called</font></span></p>\n<p style=\"margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd\" class=\"MsoNormal\"><span lang=\"EN-US\"><font size=\"3\" face=\"Calibri\">Base3 destructor called</font></span></p>\n<p style=\"margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd\" class=\"MsoNormal\"><span lang=\"EN-US\"><font size=\"3\" face=\"Calibri\">Base1 destructor called</font></span></p>\n<p style=\"margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd\" class=\"MsoNormal\"><span lang=\"EN-US\"><font size=\"3\" face=\"Calibri\">Base2 destructor called</font></span></p>\n<p>&nbsp;【参考程序】</p>\n<p>&nbsp;</p>\n<p>#include &lt;iostream&gt;</p>\n<p>using namespace std;</p>\n<p>class Base1</p>\n<p>{</p>\n<p>public:</p>\n<p>@你的代码</p>\n<p>};</p>\n<p>class Base2</p>\n<p>{</p>\n<p>public:</p>\n<p>{</p>\n<p>@你的代码</p>\n<p>};</p>\n<p>class Base3</p>\n<p>{</p>\n<p>public:</p>\n<p>@你的代码</p>\n<p>};</p>\n<p>class Derived:public Base2,public Base1,public Base3</p>\n<p>{</p>\n<p>&nbsp; &nbsp; &nbsp;Base3 member3; &nbsp; &nbsp; Base1 member1; &nbsp; &nbsp; Base2 member2;</p>\n<p>public:</p>\n<p>@你的代码</p>\n<p>};</p>\n<p>int main()</p>\n<p>{</p>\n<p>&nbsp; &nbsp; &nbsp;Derived objD(1,2,3,4,5,6,7); &nbsp; &nbsp;</p>\n<p>&nbsp; &nbsp; &nbsp;return 0;</p>\n<p>}</p>","fcontent":"<div class='pdsec'>问题描述</div><div class='pdcont'>　　编程体会包含内嵌对象多继承派生类的带参构造函数和析构函数调用顺序。声明三个基类Base1、Base2和Base3，然后从这三个基类按照公有方式派生出类Derived。在三个基类中分别定义带一个整型参数的构造函数和析构函数输出提示信息，提示信息中需要包含整型参数的数值。在派生类Derived中需要包含三个基类的内嵌对象，和相应的构造函数和析构函数用于输出提示信息，在构造函数中包含七个整型参量，其中六个用于初始化派生类和内嵌对象。</div><div class='pdsec'>样例输出</div><div class='pddata'>Base2 constructor called 3<br />\nBase1 constructor called 2<br />\nBase3 constructor called 4<br />\nBase3 constructor called 7<br />\nBase1 constructor called 5<br />\nBase2 constructor called 6<br />\nDerived constructor called 1<br />\nDerived destructor called<br />\nBase2 destructor called<br />\nBase1 destructor called<br />\nBase3 destructor called<br />\nBase3 destructor called<br />\nBase1 destructor called<br />\nBase2 destructor called</div><div class='pdsec'>参考程序</div><div class='pdcont'>　　#include &lt;iostream&gt;<br />\n　　using namespace std;<br />\n　　class Base1<br />\n　　{<br />\n　　public:<br />\n　　@你的代码<br />\n　　};<br />\n　　class Base2<br />\n　　{<br />\n　　public:<br />\n　　{<br />\n　　@你的代码<br />\n　　};<br />\n　　class Base3<br />\n　　{<br />\n　　public:<br />\n　　@你的代码<br />\n　　};<br />\n　　class Derived:public Base2,public Base1,public Base3<br />\n　　{<br />\n　　Base3 member3;     Base1 member1;     Base2 member2;<br />\n　　public:<br />\n　　@你的代码<br />\n　　};<br />\n　　int main()<br />\n　　{<br />\n　　Derived objD(1,2,3,4,5,6,7);<br />\n　　return 0;<br />\n　　}</div>\n","files":"","gpid":"D5682","indatacount":0,"inputfile":"","langs":"CPP","memorylimit":"512.0MB","opid":0,"outputfile":"","remain":0,"ret":1,"specialjudge":"","src":"","subinter":0,"timelimit":"1.0s","title":"c++_ch07_03","type":"DEFAULT"}