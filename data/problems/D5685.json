{"code":"#include <iostream> \n#include <cassert> \nusing namespace std;\nclass zrf_Ratio\n{\n     friend std::ostream& operator<<(std::ostream&, const zrf_Ratio&);\n     friend std::istream& operator>>(std::istream&, zrf_Ratio&);\n     friend bool operator==(const zrf_Ratio&, const zrf_Ratio&);\n     friend bool operator<(const zrf_Ratio&, const zrf_Ratio&);\npublic:\n     zrf_Ratio(int=0,int=1);\n     zrf_Ratio(const zrf_Ratio&);\n \nprivate:\n     int num;\n     int den;\n     void reduce();//化为最简分数\n};\n@你的代码\n \n \n//公有成员函数:\nzrf_Ratio::zrf_Ratio(int num, int den) : num(num), den(den)\n{\n     reduce();\n}\n \nzrf_Ratio::zrf_Ratio(const zrf_Ratio& r) : num(r.num), den(r.den)\n{\n \n}\n \n//私有成员函数:\nvoid swap(int &m, int &n)\n{   \n     int t;       \n     t=m;    \n     m=n;    \n     n=t;\n}\n \nint zrf_Gcd(int m, int n)\n{\n     if (m<n)\n         swap(m,n);\n     assert(n>=0);\n     while (n>0) \n     {\n         int r=m%n;  \n         m = n;   \n         n = r;\n     }\n     return m;\n}\n \nvoid zrf_Ratio::reduce()\n{\n     if (num == 0 || den == 0) \n     {\n         num = 0;  \n         den = 1;  \n         return; \n     }\n     if (den < 0)\n     {\n         den *= -1;  \n         num *= -1;\n     }\n     if (num == 1)\n         return;\n     int sgn = (num<0?-1:1);\n     int g = zrf_Gcd(sgn*num,den);\n     num /= g; \n     den /= g;\n}\n \nint main()\n{\n     int a = 0, b = 0, c = 0, d = 0;\n     cin >> a >> b >> c >> d;\n     zrf_Ratio zrf(a, b),ssh(c, d);\n     std::cout<<\"zrf is:\"<<zrf<<\"; ssh is:\"<<ssh<<'\\n' ;\n     std::cout<<\"(zrf==ssh) is:\"<<(zrf==ssh)<<\"; (zrf<ssh) is:\"<<(zrf<ssh) <<endl;\n     return 0;\n \n}\n ","content":"<p style=\"margin: 6pt 0cm 3pt\" class=\"a0\">【问题描述】</p>\n<p style=\"margin: 6pt 0cm 3pt\" class=\"a0\"><font size=\"3\"><font face=\"宋体\"><span style=\"mso-bidi-font-family: Arial\">已知一个有理数类<span lang=\"EN-US\">Zrf_Ratio</span>，实现如下的操作符重载形式：</span><span style=\"font-family: &quot;Arial&quot;,&quot;sans-serif&quot;; font-size: 9pt\" lang=\"EN-US\"><o:p></o:p></span></font></font></p>\n<p style=\"text-align: left; margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd; mso-pagination: widow-orphan\" class=\"MsoNormal\" align=\"left\"><span style=\"font-family: 宋体; font-size: 9pt; mso-font-kerning: 0pt; mso-bidi-font-family: Arial\" lang=\"EN-US\"><span style=\"mso-spacerun: yes\">&nbsp;&nbsp;&nbsp; </span>friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, const zrf_Ratio&amp;);</span><span style=\"font-family: &quot;Arial&quot;,&quot;sans-serif&quot;; font-size: 9pt; mso-font-kerning: 0pt; mso-fareast-font-family: 宋体\" lang=\"EN-US\"><o:p></o:p></span></p>\n<p style=\"text-align: left; margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd; mso-pagination: widow-orphan\" class=\"MsoNormal\" align=\"left\"><span style=\"font-family: 宋体; font-size: 9pt; mso-font-kerning: 0pt; mso-bidi-font-family: Arial\" lang=\"EN-US\"><span style=\"mso-spacerun: yes\">&nbsp;&nbsp;&nbsp; </span>friend std::istream&amp; operator&gt;&gt;(std::istream&amp;, zrf_Ratio&amp;);//</span><span style=\"font-family: 宋体; font-size: 9pt; mso-font-kerning: 0pt; mso-bidi-font-family: Arial\">输出最简分数</span><span style=\"font-family: &quot;Arial&quot;,&quot;sans-serif&quot;; font-size: 9pt; mso-font-kerning: 0pt; mso-fareast-font-family: 宋体\" lang=\"EN-US\"><o:p></o:p></span></p>\n<p style=\"text-align: left; margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd; mso-pagination: widow-orphan\" class=\"MsoNormal\" align=\"left\"><span style=\"font-family: 宋体; font-size: 9pt; mso-font-kerning: 0pt; mso-bidi-font-family: Arial\" lang=\"EN-US\"><span style=\"mso-spacerun: yes\">&nbsp;&nbsp;&nbsp; </span>friend bool operator==(const zrf_Ratio&amp;, const zrf_Ratio&amp;);</span><span style=\"font-family: &quot;Arial&quot;,&quot;sans-serif&quot;; font-size: 9pt; mso-font-kerning: 0pt; mso-fareast-font-family: 宋体\" lang=\"EN-US\"><o:p></o:p></span></p>\n<p style=\"text-align: left; margin: 0cm 0cm 0pt; mso-para-margin-left: 0gd; mso-pagination: widow-orphan\" class=\"MsoNormal\" align=\"left\"><span style=\"font-family: 宋体; font-size: 9pt; mso-font-kerning: 0pt; mso-bidi-font-family: Arial\" lang=\"EN-US\"><span style=\"mso-spacerun: yes\">&nbsp;&nbsp;&nbsp; </span>friend bool operator&lt;(const zrf_Ratio&amp;, const zrf_Ratio&amp;);</span><span style=\"font-family: &quot;Arial&quot;,&quot;sans-serif&quot;; font-size: 9pt; mso-font-kerning: 0pt; mso-fareast-font-family: 宋体\" lang=\"EN-US\"><o:p></o:p></span></p>","fcontent":"<div class='pdsec'>问题描述</div><div class='pdcont'>　　已知一个有理数类Zrf_Ratio，实现如下的操作符重载形式：<br />\n　　friend std::ostream&amp; operator&lt;&lt;(std::ostream&amp;, const zrf_Ratio&amp;);<br />\n　　friend std::istream&amp; operator&gt;&gt;(std::istream&amp;, zrf_Ratio&amp;);//输出最简分数<br />\n　　friend bool operator==(const zrf_Ratio&amp;, const zrf_Ratio&amp;);<br />\n　　friend bool operator&lt;(const zrf_Ratio&amp;, const zrf_Ratio&amp;);</div>\n","files":"","gpid":"D5685","indatacount":0,"inputfile":"","langs":"CPP","memorylimit":"512.0MB","opid":0,"outputfile":"","remain":0,"ret":1,"specialjudge":"","src":"","subinter":0,"timelimit":"1.0s","title":"c++_ch08_01","type":"DEFAULT"}